#!/bin/bash
#
### BEGIN INIT INFO
# Provides:   mount-propagation
# Required-Start:    $local_fs $network $syslog
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Shared mount propagation helper
# Description:
#   This helper makes sure that root filesystem is mounted with shared mount propagation.
### END INIT INFO


# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="shared mount propagation"
NAME=mount-propagation
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
DOCKERDEVICEMAPPER=/var/lib/docker/devicemapper

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

remount_all()
{
        # "mount --make-rshared /" in Debian Wheezy won't recursively make all
        # mounts shared, it has too old util-linux package.
        # We must manually walk through all mounts and make all of them rshared
        # explicitly.

        # 5th column in mountinfo is the mount point
        MOUNTS=$( awk '{ print $5; }' </proc/1/mountinfo )
        for MOUNT in $MOUNTS; do
                if [[ "$MOUNT" == "$DOCKERDEVICEMAPPER" ]]; then
                        # Skip docker device mapper mount, it *must* be private
                        continue
                fi
                mount --make-rshared "$MOUNT" || return 1
        done
        return 0
}

#
# Function that starts the daemon/service
#
do_start()
{
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started
        remount_all || exit 2
        if [ -e $PIDFILE ]; then
                return 1
        fi
        return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
        # Return
        #   0 if daemon has been stopped
        #   1 if daemon was already stopped
        #   2 if daemon could not be stopped
        #   other if a failure occurred

        # We don't have any state before the service started, we don't know
        # what needs to be mounted back to (r)private. Do nothing (instead
        # of potentially breaking the system).
        if [ -e $PIDFILE ]; then
                rm $PIDFILE
                return 0
        fi
        return 1
}

do_status()
{
        if [ -e $PIDFILE ]; then
                return 0
        fi
        return 1
}

case "$1" in
  start)
        log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
                0|1) log_end_msg 0 || exit 0 ;;
                2) log_end_msg 1 || exit 1 ;;
        esac
        ;;
  stop)
        log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
                0|1) log_end_msg 0 ;;
                2) exit 1 ;;
        esac
        ;;
  status)
        do_status && exit 0 || exit $?
        ;;

  restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac
